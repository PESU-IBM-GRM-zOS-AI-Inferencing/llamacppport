diff --git a/ggml/src/ggml-cpu/CMakeLists.txt b/ggml/src/ggml-cpu/CMakeLists.txt
index 66a5ad8d..a67bce53 100644
--- a/ggml/src/ggml-cpu/CMakeLists.txt
+++ b/ggml/src/ggml-cpu/CMakeLists.txt
@@ -480,6 +480,10 @@ function(ggml_add_cpu_backend_variant_impl tag_name)
     else()
         message(WARNING "Unknown CPU architecture. Falling back to generic implementations.")
         list(APPEND ARCH_FLAGS -DGGML_CPU_GENERIC)
+	#ifdef __MVS__
+	list(APPEND ARCH_FLAGS -mzvector)
+	message(STATUS "-mzvector enabled")
+	#endif
     endif()

     if (GGML_CPU_REPACK)
diff --git a/ggml/src/ggml-cpu/ggml-cpu-impl.h b/ggml/src/ggml-cpu/ggml-cpu-impl.h
index d839cf5c..9cc46cbf 100644
--- a/ggml/src/ggml-cpu/ggml-cpu-impl.h
+++ b/ggml/src/ggml-cpu/ggml-cpu-impl.h
@@ -352,7 +352,11 @@ inline static int32x4_t ggml_vdotq_s32(int32x4_t acc, int8x16_t a, int8x16_t b)
 #endif

 #if defined(__VXE__) || defined(__VXE2__)
+#ifdef __MVS__
+#include <builtins.h>
+#elif
 #include <vecintrin.h>
+#endif

 #define vec_neg(a)    (-(a))                // Vector Negate
 #define vec_add(a, b) ((a) + (b))           // Vector Add
diff --git a/ggml/src/ggml-cpu/ggml-cpu.c b/ggml/src/ggml-cpu/ggml-cpu.c
index 11ff228f..4a1e7f63 100644
--- a/ggml/src/ggml-cpu/ggml-cpu.c
+++ b/ggml/src/ggml-cpu/ggml-cpu.c
@@ -17,7 +17,7 @@

 #if defined(_MSC_VER) || defined(__MINGW32__)
 #include <malloc.h> // using malloc.h with MSC/MINGW
-#elif !defined(__FreeBSD__) && !defined(__NetBSD__) && !defined(__OpenBSD__)
+#elif !defined(__FreeBSD__) && !defined(__NetBSD__) && !defined(__OpenBSD__) && !defined(__MVS__)
 #include <alloca.h>
 #endif

diff --git a/ggml/src/ggml-cpu/ggml-cpu.cpp b/ggml/src/ggml-cpu/ggml-cpu.cpp
index c9daa4c3..63839d07 100644
--- a/ggml/src/ggml-cpu/ggml-cpu.cpp
+++ b/ggml/src/ggml-cpu/ggml-cpu.cpp
@@ -33,6 +33,38 @@
 #    include <sys/types.h>
 #endif

+#define CVT_PTR 	0x10
+#define CVTRCEP_OFFSET 	0x490
+#define RCEAFC_OFFSET 	0x088
+
+typedef unsigned data_area_ptr_assign_type;
+
+typedef union {
+    struct {
+#if defined(_LP64)
+        data_area_ptr_assign_type lower;
+#endif
+	data_area_ptr_assign_type assign;
+    };
+    char* deref;
+} data_area_ptr;
+
+uint64_t get_free_memory(void) {
+    uint64_t freeram;
+    data_area_ptr cvt = {0};
+    data_area_ptr rcep = {0};
+    cvt.assign = *(data_area_ptr_assign_type*)(CVT_PTR);
+    rcep.assign = *(data_area_ptr_assign_type*)(cvt.deref + CVTRCEP_OFFSET);
+    freeram = (uint64_t)*((uint32_t*)(rcep.deref + RCEAFC_OFFSET)) * 4096;
+
+    return freeram;
+}
+
+uint64_t get_total_memory(void) {
+    /* Use CVTRLSTG to get the size of actual real storage online at IPL in K. */
+    return (uint64_t)((int)((char *__ptr32 *__ptr32 *)0)[4][214]) * 1024;
+}
+
 // ggml-backend interface

 std::vector<ggml_backend_buffer_type_t>& ggml_backend_cpu_get_extra_buffers_type() {
@@ -43,7 +75,7 @@ std::vector<ggml_backend_buffer_type_t>& ggml_backend_cpu_get_extra_buffers_type
         if (ggml_backend_amx_buffer_type()) {
             bufts.push_back(ggml_backend_amx_buffer_type());
         }
-#endif
+#endif

 #ifdef GGML_USE_CPU_KLEIDIAI
         if (ggml_backend_cpu_kleidiai_buffer_type()) {
@@ -340,6 +372,9 @@ static void ggml_backend_cpu_device_get_memory(ggml_backend_dev_t dev, size_t *
     GlobalMemoryStatusEx(&status);
     *total = status.ullTotalPhys;
     *free = status.ullAvailPhys;
+#elifdef __MVS__
+    *total = get_total_memory();
+    *free = get_free_memory();
 #else
     long pages = sysconf(_SC_PHYS_PAGES);
     long page_size = sysconf(_SC_PAGE_SIZE);
diff --git a/ggml/src/ggml-cpu/llamafile/sgemm.cpp b/ggml/src/ggml-cpu/llamafile/sgemm.cpp
index ed61869a..1bb64b0f 100644
--- a/ggml/src/ggml-cpu/llamafile/sgemm.cpp
+++ b/ggml/src/ggml-cpu/llamafile/sgemm.cpp
@@ -194,7 +194,7 @@ inline float hsum(float16x8_t x) {

 #if defined(__VXE__) || defined(__VXE2__)
 inline float hsum(float32x4_t x) {
-    float32x4_t tmp = x + vec_reve(x);
+    float32x4_t tmp = x + (float32x4_t)vec_reve((__vector int)x);
     return tmp[0] + tmp[1];
 }
 #endif
@@ -256,10 +256,12 @@ template <> inline float32x4_t load(const ggml_fp16_t * p) {
         tmp[i] = GGML_CPU_FP16_TO_FP32(p[i]);
     }

-    return vec_xl(0, (const float *)(tmp));
+    //return vec_xl(0, (const float *)(tmp));
+    return GGML_VEC_LOAD(tmp);
 }
 template <> inline float32x4_t load(const float * p) {
-    return vec_xl(0, p);
+    //return vec_xl(0, p);
+    return GGML_VEC_LOAD(p);
 }
 #endif

diff --git a/ggml/src/ggml-cpu/llamafile/sgemm.h b/ggml/src/ggml-cpu/llamafile/sgemm.h
index 729e8853..5a35157b 100644
--- a/ggml/src/ggml-cpu/llamafile/sgemm.h
+++ b/ggml/src/ggml-cpu/llamafile/sgemm.h
@@ -3,7 +3,7 @@
 #include <stdbool.h>

 #if defined(__VXE__) || defined(__VXE2__)
-#include <vecintrin.h>
+//#include <vecintrin.h>
 #endif

 #ifdef __cplusplus
diff --git a/ggml/src/ggml-cpu/ops.cpp b/ggml/src/ggml-cpu/ops.cpp
index 2f153419..3a459782 100644
--- a/ggml/src/ggml-cpu/ops.cpp
+++ b/ggml/src/ggml-cpu/ops.cpp
@@ -1,3 +1,9 @@
+#ifdef GGML_MASS
+#include <mass_simd.h>
+#define cosf(a) cosd2(a)
+#define sinf(a) sind2(a)
+#endif
+
 #include "ops.h"

 #include "ggml-cpu.h"
diff --git a/ggml/src/ggml-cpu/simd-mappings.h b/ggml/src/ggml-cpu/simd-mappings.h
index b4ad68c9..a25387d4 100644
--- a/ggml/src/ggml-cpu/simd-mappings.h
+++ b/ggml/src/ggml-cpu/simd-mappings.h
@@ -2,6 +2,18 @@

 #include "ggml-cpu-impl.h"

+#if defined(__MVS__)
+    #define GGML_VEC_LOAD(ptr) (vec_xl(0, (int32_t *)(ptr)))
+    #define GGML_VEC_STORE(vec, ptr) vec_xst((__vector int)(vec), 0, (int32_t *)(ptr))
+#else
+    #define GGML_VEC_LOAD(ptr) vec_xl(0, (const float *)(ptr))
+    #define GGML_VEC_STORE(vec, ptr) vec_xst((vec), 0, (float *)(ptr))
+#endif
+
+#if defined(__lcbb)
+#  undef __lcbb
+#endif
+
 #ifdef __ARM_FEATURE_SVE
 #include <arm_sve.h>
 #endif // __ARM_FEATURE_SVE
@@ -1080,10 +1092,10 @@ static inline void __lsx_f16x4_store(ggml_fp16_t * x, __m128 y) {
 #define GGML_F32_EPR  4

 #define GGML_F32x4              float32x4_t
-#define GGML_F32x4_ZERO         vec_splats(0.0f)
+#define GGML_F32x4_ZERO         (float32x4_t)vec_splats((int32_t)0.0f)
 #define GGML_F32x4_SET1         vec_splats
-#define GGML_F32x4_LOAD(p)      vec_xl(0, p)
-#define GGML_F32x4_STORE(p, r)  vec_xst(r, 0, p)
+#define GGML_F32x4_LOAD(p)      GGML_VEC_LOAD(p)
+#define GGML_F32x4_STORE(p, r)  GGML_VEC_STORE(r, p)
 #define GGML_F32x4_FMA(a, b, c) vec_madd(b, c, a)
 #define GGML_F32x4_ADD          vec_add
 #define GGML_F32x4_MUL          vec_mul
@@ -1101,8 +1113,8 @@ static inline void __lsx_f16x4_store(ggml_fp16_t * x, __m128 y) {
     for (int i = 0; i < offset; ++i) {              \
         x[i] = vec_add(x[i], x[offset + i]);        \
     }                                               \
-    float32x4_t tmp = x[0] + vec_reve(x[0]);        \
-    res = tmp[0] + tmp[1];                          \
+    float32x4_t tmp = x[0] + (float32x4_t)vec_reve((__vector int)x[0]); \
+    res = (ggml_float)tmp[0] + (ggml_float)tmp[1];                          \
 }

 #define GGML_F32_VEC        GGML_F32x4
@@ -1133,7 +1145,7 @@ static inline float32x4_t __lzs_f16cx4_load(const ggml_fp16_t * x) {

     // note: keep type-cast here to prevent compiler bugs
     // see: https://github.com/ggml-org/llama.cpp/issues/12846
-    return vec_xl(0, (const float *)(tmp));
+    return GGML_VEC_LOAD(tmp);
 #endif
 }

@@ -1152,7 +1164,7 @@ static inline void __lzs_f16cx4_store(ggml_fp16_t * x, float32x4_t v_y) {

     // note: keep type-cast here to prevent compiler bugs
     // see: https://github.com/ggml-org/llama.cpp/issues/12846
-    vec_xst(v_y, 0, (float *)(arr));
+    GGML_VEC_STORE(v_y, arr);

     for (int i = 0; i < 4; i++) {
         x[i] = GGML_CPU_FP32_TO_FP16(arr[i]);
diff --git a/ggml/src/ggml-cpu/unary-ops.cpp b/ggml/src/ggml-cpu/unary-ops.cpp
index 4fce569b..9da79838 100644
--- a/ggml/src/ggml-cpu/unary-ops.cpp
+++ b/ggml/src/ggml-cpu/unary-ops.cpp
@@ -1,3 +1,7 @@
+#ifdef GGML_MASS
+#include <mass.h>
+#endif
+
 #include "unary-ops.h"

 static inline float op_abs(float x) {
diff --git a/ggml/src/ggml-cpu/vec.cpp b/ggml/src/ggml-cpu/vec.cpp
index a8156011..7640e3b1 100644
--- a/ggml/src/ggml-cpu/vec.cpp
+++ b/ggml/src/ggml-cpu/vec.cpp
@@ -1,3 +1,7 @@
+#ifdef GGML_MASS
+#include <mass.h>
+#endif
+
 #include "vec.h"

 #include <cassert>
